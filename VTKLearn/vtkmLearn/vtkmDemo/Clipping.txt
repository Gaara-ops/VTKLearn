#include <QCoreApplication>

//#ifndef INITIAL_OPENGL
//#define INITIAL_OPENGL
//#include "vtkAutoInit.h"
//VTK_MODULE_INIT(vtkRenderingOpenGL2)
//VTK_MODULE_INIT(vtkRenderingVolumeOpenGL2)
//VTK_MODULE_INIT(vtkRenderingFreeType)
//VTK_MODULE_INIT(vtkRenderingContextOpenGL2)
//#endif

/*vtkNew<vtkInteractorStyleTrackballCamera> style;
iren->SetInteractorStyle(style.GetPointer());*/

//着色器测试类
//#include "shadertest.h"
#include "GlobeInclude.h"

#include <vtkm/cont/ArrayHandleCast.h>
#include <vtkm/cont/DataSet.h>
#include <vtkm/cont/DeviceAdapterAlgorithm.h>
#include <vtkm/cont/Timer.h>
#include <vtkm/io/reader/VTKDataSetReader.h>
#include <vtkm/io/writer/VTKDataSetWriter.h>

#include <vtkm/worklet/Clip.h>

#include <algorithm>
#include <fstream>
#include <iostream>
#include <stdexcept>
#include <string>

using FloatVec3 = vtkm::Vec<vtkm::Float32, 3>;

namespace
{

template <typename DeviceTag>
struct FieldMapper
{
  vtkm::cont::DynamicArrayHandle& Output;
  vtkm::worklet::Clip& Worklet;
  bool IsCellField;

  FieldMapper(vtkm::cont::DynamicArrayHandle& output,
              vtkm::worklet::Clip& worklet,
              bool isCellField)
    : Output(output)
    , Worklet(worklet)
    , IsCellField(isCellField)
  {
  }

  template <typename ArrayType>
  void operator()(const ArrayType& input) const
  {
    if (this->IsCellField)
    {
      this->Output = this->Worklet.ProcessCellField(input, DeviceTag());
    }
    else
    {
      this->Output = this->Worklet.ProcessPointField(input, DeviceTag());
    }
  }
};

} // end anon namespace

int main(int argc, char *argv[])
{
    QCoreApplication a(argc, argv);
    /*
     * 着色器测试
    ShaderTest st;
    st.CreateShaderTest();*/


    using DeviceAdapter = VTKM_DEFAULT_DEVICE_ADAPTER_TAG;
    std::cout << "Device Adapter Name: " << vtkm::cont::DeviceAdapterTraits<DeviceAdapter>::GetName()
              << std::endl;

    vtkm::io::reader::VTKDataSetReader reader("F:/vtk-m/vtk-m-v1.1.0/examples/demo/grid.vtk");
    vtkm::cont::DataSet input = reader.ReadDataSet();

    vtkm::cont::Field scalarField = input.GetField(0);

    vtkm::Float32 clipValue = 100.0f;
    vtkm::worklet::Clip clip;

    vtkm::cont::Timer<DeviceAdapter> total;
    vtkm::cont::Timer<DeviceAdapter> timer;
    vtkm::cont::CellSetExplicit<> outputCellSet =
      clip.Run(input.GetCellSet(0),
               scalarField.GetData().ResetTypeList(vtkm::TypeListTagScalarAll()),
               clipValue,
               DeviceAdapter());
    vtkm::Float64 clipTime = timer.GetElapsedTime();

    vtkm::cont::DataSet output;
    output.AddCellSet(outputCellSet);


    timer.Reset();
    vtkm::cont::DynamicArrayHandle coords;
    {
      FieldMapper<DeviceAdapter> coordMapper(coords, clip, false);
      input.GetCoordinateSystem(0).GetData().CastAndCall(coordMapper);
    }
    vtkm::Float64 processCoordinatesTime = timer.GetElapsedTime();
    output.AddCoordinateSystem(vtkm::cont::CoordinateSystem("coordinates", coords));

    timer.Reset();
    for (vtkm::Id i = 0; i < input.GetNumberOfFields(); ++i)
    {
      vtkm::cont::Field inField = input.GetField(i);
      bool isCellField;
      switch (inField.GetAssociation())
      {
        case vtkm::cont::Field::ASSOC_POINTS:
          isCellField = false;
          break;

        case vtkm::cont::Field::ASSOC_CELL_SET:
          isCellField = true;
          break;

        default:
          continue;
      }

      vtkm::cont::DynamicArrayHandle outField;
      FieldMapper<DeviceAdapter> fieldMapper(outField, clip, isCellField);
      inField.GetData().CastAndCall(fieldMapper);
      output.AddField(vtkm::cont::Field(inField.GetName(), inField.GetAssociation(), outField));
    }

    vtkm::Float64 processScalarsTime = timer.GetElapsedTime();

    vtkm::Float64 totalTime = total.GetElapsedTime();

    std::cout << "Timings: " << std::endl
              << "clip: " << clipTime << std::endl
              << "process coordinates: " << processCoordinatesTime << std::endl
              << "process scalars: " << processScalarsTime << std::endl
              << "Total: " << totalTime << std::endl;

    vtkm::io::writer::VTKDataSetWriter writer("./testclip.vtk");
    writer.WriteDataSet(output);

    return a.exec();
}
